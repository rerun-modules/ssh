#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: ssh:add-authorized-key: "Add a key to the authorized_keys file"
#/ usage: rerun ssh:add-authorized-key  --public-key <> [ --authorized-keys-file <$HOME/.ssh/authorized_keys>] [ --type <dsa>] [ --comment <>] 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh add-authorized-key || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: ssh:add-authorized-key. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: PUBLIC_KEY AUTHORIZED_KEYS_FILE TYPE COMMENT

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
# - - -

if [[ -r ${AUTHORIZED_KEYS_FILE} ]]
then
  # Eliminate other entries for this key, if they are not identical to the one specified.

  if grep -q "^ssh-${TYPE} ${PUBLIC_KEY} ${COMMENT}$" ${AUTHORIZED_KEYS_FILE}
  then
    echo "INFO: entry already exists, skipping" 1>&2
  else
    TMP_AUTHORIZED_KEYS_FILE=$(mktemp)

    # Ignore the exit code since it's an indeterminate indication of success in this case.
    if fgrep -v "${PUBLIC_KEY}" ${AUTHORIZED_KEYS_FILE} > ${TMP_AUTHORIZED_KEYS_FILE}
    then
      :
    fi

    # Only copy the file if it has changed.
    if ! cmp -s ${TMP_AUTHORIZED_KEYS_FILE} ${AUTHORIZED_KEYS_FILE}
    then
      cp -p ${TMP_AUTHORIZED_KEYS_FILE} ${AUTHORIZED_KEYS_FILE}
    fi

    rm -f ${TMP_AUTHORIZED_KEYS_FILE}

    # Compose and append the entry to the specified authorized keys file.
    echo "ssh-${TYPE} ${PUBLIC_KEY} ${COMMENT}" >> ${AUTHORIZED_KEYS_FILE}

    echo "INFO: replaced existing entrie(s)" 1>&2
  fi
else
  # Make sure the authorized_keys directory exists:
  [[ -d $(dirname ${AUTHORIZED_KEYS_FILE}) ]] || mkdir $(dirname ${AUTHORIZED_KEYS_FILE}) && chmod 700 $(dirname ${AUTHORIZED_KEYS_FILE})

  # Create the authorized key file with conventional permissions, if it doesn't already exist.
  echo "ssh-${TYPE} ${PUBLIC_KEY} ${COMMENT}" > ${AUTHORIZED_KEYS_FILE} 
  chmod 600 ${AUTHORIZED_KEYS_FILE}

  echo "INFO: added entry to new authorized key file" 1>&2
fi

# Done. Exit with last command exit status.
exit $?

